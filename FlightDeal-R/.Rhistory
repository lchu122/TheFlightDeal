if(date.entry.split[length(date.entry.split)] == 'allYears'){
num.date.start <- num.date.start - trunc(num.date.start)
num.date.end <- num.date.end - trunc(num.date.end)
}
else{
num.month.entry <- num.month.entry + as.numeric(date.entry.split[length(date.entry.split)])
}
tryCatch({
if(num.month.entry >= num.date.start && num.month.entry <= num.date.end){
return(TRUE)
}
else {
return(FALSE)
}
},
error = function(cond) {
message('this caused an error ', date.range)
message(num.date.start)
message(num.date.end)
},
finally = {
return(FALSE)
}
)
}
trueones <- which(lapply(testasd, isDateIn, date.entry = 'late January 2017' ) == TRUE)
warnings()
test.dates3 <- " 9 January 2017 - April 2017"
dateParser(test.dates3)
dateParser(test.dates3)
grep('\\b\\d+\\b', ' 4 December')
test.dates3 <- " 10 January 2017 - April 2017"
dateParser(test.dates3)
test.dates3 <- "10 January 2017 - April 2017"
dateParser(test.dates)
dateParser(test.dates2)
dateParser(test.dates3)
test.dates <- '20 December 2017 - 15 January 2018/March 2018/April 10th 2018/Nov 10 2016'
test.dates2 <- "Nov 12 2016 - early December 2016/January 2017 - May 2017"
test.dates3 <- "10 January 2017 - April 2017"
dateParser(test.dates)
dateParser(test.dates2)
dateParser(test.dates3)
# turn dates into consistent format we can use for comparison
# some dates have days, others just indicate early/mid/late month etc.
# others simply have month
dateParser <- function(date.string){
# complicated, deal via cases.
# split into the multiple ranges, make into list again later
dates.raw <- strsplit(date.string, '/')[[1]]
# replace early mid and late with arbitrary dates
# dates.raw <- gsub('early', '1', dates.raw)
# dates.raw <- gsub('mid', '11', dates.raw)
# dates.raw <- gsub('late', '21', dates.raw)
# keep it at early, mid, late, or all
# convert days into a range
# 1-1 is early, 11-20 is mid, 21-30 is late. No date is assumed to be the whole month.
# would have to set days as 1 to eom if there's no date.
# split the dash to check the above
dates.raw.split <- strsplit(dates.raw, ' - ')
# note we may have a list of multiple elements now
# get the length of each. this keeps track of which ones were split by dash or not
length.splits <- sapply(dates.raw.split, length)
# check each individual string. 1st element is either early, mid, late, or a day, or a month
dates.raw.split2 <- lapply(dates.raw.split, strsplit, split = ' ')
# unlist once for easier access
dates.raw.split3 <- unlist(dates.raw.split2, recursive = FALSE)
# initialize vector for recombining
dates.recombined <- character(length(dates.raw.split3))
# ensure dd mm yyyy format
# remember to use lapply here, because we are doing it on a list
dates.raw.split4 <- lapply(dates.raw.split3, monDaySwap)
# by now every element has at least a month and a year.
# assume any one with only 2 elements has no day. Set to "the month of"
has.no.daterange <- which(sapply(dates.raw.split4,length) == 2)
for( i in has.no.daterange){
dates.recombined[i] <- paste("month of", paste(dates.raw.split4[[i]], collapse = ' '), collapse = '')
}
# we couldn't just take the complement because some already have early, mid, late
has.day <- grep('\\b\\d+\\b', dates.raw.split4)
# day by now should be in 1st position.
for( i in has.day){
if(as.numeric(dates.raw.split4[[i]][1]) < 11 ){
dates.raw.split4[[i]][1] = "early"
} else if(as.numeric(dates.raw.split4[[i]][1]) < 21) {
dates.raw.split4[[i]][1] = "mid"
} else if(as.numeric(dates.raw.split4[[i]][1]) >=21){
dates.raw.split4[[i]][1] = "late"
}
dates.recombined[i] <- paste(dates.raw.split4[[i]], collapse = ' ')
}
dates.recombined2 <- character(length(length.splits))
j = 1
k = 1
for( i in length.splits ) {
if( i == 1){
dates.recombined2[j] <- dates.recombined[k]
k = k + 1
}
if( i == 2){
dates.recombined2[j] <- paste(dates.recombined[k], dates.recombined[k+1], sep = ' - ')
k = k + 2
}
j <- j + 1
}
# a vector of dates
return(dates.recombined2)
# for converting to actual dates following the vein of changing early to 1-11, etc.
# dates.parsed <-  as.Date(sapply(dates.raw, dateFormat), origin ='1970-01-01')
# return(dates.parsed)
}
test.dates <- '20 December 2017 - 15 January 2018/March 2018/April 10th 2018/Nov 10 2016'
dateParser(test.dates)
date.string <- "10 January 2017 - April 2017"
dates.raw <- strsplit(date.string, '/')[[1]]
dates.raw
dates.raw.split <- strsplit(dates.raw, ' - ')
dates.raw.split
length.splits <- sapply(dates.raw.split, length)
length.spltis
length.splits
dates.raw.split2 <- lapply(dates.raw.split, strsplit, split = ' ')
dates.raw.split2
dates.raw.split3 <- unlist(dates.raw.split2, recursive = FALSE)
dates.raw.split3
dates.recombined <- character(length(dates.raw.split3))
dates.recombined
dates.raw.split4 <- lapply(dates.raw.split3, monDaySwap)
dates.raw.split4
has.no.daterange <- which(sapply(dates.raw.split4,length) == 2)
has.no.daterange
for( i in has.no.daterange){
dates.recombined[i] <- paste("month of", paste(dates.raw.split4[[i]], collapse = ' '), collapse = '')
}
dates.recombined
has.day <- grep('\\b\\d+\\b', dates.raw.split4)
has.day
dates.raw.split4
has.day <- grep('\\b\\d{1,2}\\b', dates.raw.split4)
dates.raw.split4
has.day
test.dates.split <- c("Jan", "10", "2017")
test.dates.split2 <- c("Jan", "10th", "2018")
monDaySwap(test.dates.split)
monDaySwap(test.dates.split2)
# returning it in decimal places so we can use "all" filter wisely
month2Num <- function(month.string) {
if(nchar(month.string) == 3){
month.num <- which(month.abb == month.string)*.01
}
else {
month.num <- which(month.name == month.string)*.01
}
return(month.num)
}
# turn dates into consistent format we can use for comparison
# some dates have days, others just indicate early/mid/late month etc.
# others simply have month
dateParser <- function(date.string){
# complicated, deal via cases.
# split into the multiple ranges, make into list again later
dates.raw <- strsplit(date.string, '/')[[1]]
# replace early mid and late with arbitrary dates
# dates.raw <- gsub('early', '1', dates.raw)
# dates.raw <- gsub('mid', '11', dates.raw)
# dates.raw <- gsub('late', '21', dates.raw)
# keep it at early, mid, late, or all
# convert days into a range
# 1-1 is early, 11-20 is mid, 21-30 is late. No date is assumed to be the whole month.
# would have to set days as 1 to eom if there's no date.
# split the dash to check the above
dates.raw.split <- strsplit(dates.raw, ' - ')
# note we may have a list of multiple elements now
# get the length of each. this keeps track of which ones were split by dash or not
length.splits <- sapply(dates.raw.split, length)
# check each individual string. 1st element is either early, mid, late, or a day, or a month
dates.raw.split2 <- lapply(dates.raw.split, strsplit, split = ' ')
# unlist once for easier access
dates.raw.split3 <- unlist(dates.raw.split2, recursive = FALSE)
# initialize vector for recombining
dates.recombined <- character(length(dates.raw.split3))
# ensure dd mm yyyy format
# remember to use lapply here, because we are doing it on a list
dates.raw.split4 <- lapply(dates.raw.split3, monDaySwap)
# by now every element has at least a month and a year.
# assume any one with only 2 elements has no day. Set to "the month of"
has.no.daterange <- which(sapply(dates.raw.split4,length) == 2)
for( i in has.no.daterange){
dates.recombined[i] <- paste("month of", paste(dates.raw.split4[[i]], collapse = ' '), collapse = '')
}
# we couldn't just take the complement because some already have early, mid, late
has.day <- grep('\\b\\d{1,2}\\b', dates.raw.split4)
# day by now should be in 1st position.
for( i in has.day){
if(as.numeric(dates.raw.split4[[i]][1]) < 11 ){
dates.raw.split4[[i]][1] = "early"
} else if(as.numeric(dates.raw.split4[[i]][1]) < 21) {
dates.raw.split4[[i]][1] = "mid"
} else if(as.numeric(dates.raw.split4[[i]][1]) >=21){
dates.raw.split4[[i]][1] = "late"
}
dates.recombined[i] <- paste(dates.raw.split4[[i]], collapse = ' ')
}
# for lack of a better word, with early, mid, late etc.
has.specifier <- setdiff(seq(1,length(dates.raw.split4)), has.no.daterange)
has.specifier <- setdiff(has.specifier, has.day)
for(i in has.specifier){
dates.recombined[i] <- paste(dates.raw.split4[[i]], collapse = ' ')
}
dates.recombined2 <- character(length(length.splits))
j = 1
k = 1
for( i in length.splits ) {
if( i == 1){
dates.recombined2[j] <- dates.recombined[k]
k = k + 1
}
if( i == 2){
dates.recombined2[j] <- paste(dates.recombined[k], dates.recombined[k+1], sep = ' - ')
k = k + 2
}
j <- j + 1
}
# a vector of dates
return(dates.recombined2)
# for converting to actual dates following the vein of changing early to 1-11, etc.
# dates.parsed <-  as.Date(sapply(dates.raw, dateFormat), origin ='1970-01-01')
# return(dates.parsed)
}
test.dates <- '20 December 2017 - 15 January 2018/March 2018/April 10th 2018/Nov 10 2016'
test.dates2 <- "Nov 12 2016 - early December 2016/January 2017 - May 2017"
test.dates3 <- "10 January 2017 - April 2017"
dateParser(test.dates)
dateParser(test.dates2)
dateParser(test.dates3)
# swap back dates to day month year
# takes in a date.string that has arleady been split by spaces
# returns a split string still
monDaySwap <- function(date.string.split) {
split.string = date.string.split
if(grepl('\\b\\d{1,2}\\b', split.string[2])) {
temp = split.string[2]
split.string[2] = split.string[1]
split.string[1] = temp
} else if(grepl('\\b\\d{1,2}(st|nd|rd|th)', split.string[2])) {
temp = split.string[2]
split.string[2] = split.string[1]
# drop the suffix on the date
split.string[1] = regmatches(temp, regexec('\\d{1,2}', temp))[[1]]
}
# return(paste(split.string, collapse =' '))
return(split.string)
}
testasd <- lapply(flightdeal.data$TravelDates, dateParser)
trueones <- which(lapply(testasd, isDateIn, date.entry = 'late January 2017' ) == TRUE)
flightdeal.data <- na.omit(flightdeal.data)
flightdeal.data$TravelDates <- lapply(flightdeal.data$TravelDates, dateParser)
trueones <- which(lapply(flightdeal.data$TravelDates, isDateIn, date.entry = 'late January 2017' ) == TRUE)
testasd[806]
testasd[802:806]
testasd[800:806]
testasd[795:806]
flightdeal.data <- read.csv('FlightDealCleaned.txt', sep = '|', header = FALSE,
col.names = c('PostingDate','Title','Airline','Price','isBothWays','TravelDates','Routing','Miles','AdditionalInfo'),
stringsAsFactors = FALSE)
re1 <-"(?<=or )((early |mid |late )?(January|February|March|April|May|June|July|August|September|October|November|December)( \\d+(th|st|nd|rd))?(, \\d{4})?)"
re2 <- "(?<=or )((early |mid |late )?(January|February|March|April|May|June|July|August|September|October|November|December)( \\d+(th|st|nd|rd))?(, \\d{4})?)(?= -)"
# some tests
# note for some reason negative lookahead assertion doesn't work. Works in Python
test1 <- 'Valid for travel in early December or January, 2017 - March, 2017.'
test2 <- 'Valid for travel in early December or January, 2017.'
grep(re1, test1, perl = TRUE)
grep(re1, test2, perl = TRUE)
or.fix <- function(or.man, date) {
if(grepl(re1, or.man, perl = TRUE) && !grepl(re2, or.man, perl = TRUE)){
or.date.raw <- regmatches(or.man, regexpr(re1, or.man, perl=TRUE))
or.date <- paste(or.date.raw, sep='/', collapse ='')
print(or.date)
return(paste(date, or.date, sep="/"))
}
}
date.strings <- flightdeal.data$AdditionalInfo
date.strings.fixed.or <- mapply(or.fix, date.strings, flightdeal.data$TravelDates)
# check results
unlisted.dates <- unlist(date.strings.fixed.or)
unlisted.dates
# we could also use by matching names of our unlisted.dates to get index, but that would require applying
# through data frame again
unlisted.dates.idx <- which(unlist(lapply(date.strings.fixed.or, is.null)) == FALSE)
unlisted.dates.idx
# tired of mapplys
for( i in 1:length(unlisted.dates.idx)) {
index = unlisted.dates.idx[i]
flightdeal.data$TravelDates[index] <- unlisted.dates[i]
}
flightdeal.data$TravelDates[1]
# end fix
# remove leading /
flightdeal.data$TravelDates <- sapply(flightdeal.data$TravelDates, function(x){sub('^/', '', x)})
# remove commas
flightdeal.data$TravelDates <- sapply(flightdeal.data$TravelDates, function(x) { gsub(',', '', x)})
flightdeal.data <- read.csv('FlightDealCleaned.txt', sep = '|', header = FALSE,
col.names = c('PostingDate','Title','Airline','Price','isBothWays','TravelDates','Routing','Miles','AdditionalInfo'),
stringsAsFactors = FALSE)
kernlab
load(kernlab)
install.packages("kernlab")
library(kernlab)
kdata <- load(kernlab)
data(spam)
spam <- data(spam)
spam
data(spam)
spam
head(spam)
summary(spam)
library(FactoMineR)
PCA(spam[,-1])
PCA(spam[,-length(spam)])
spam.PCA <- PCA(spam[,-length(spam)])
spam.PCA$eig
scale(spam)
spam.scale <- scale(spam[, -length(spam)])
head(spam.scale)
spam.PCA <- PCA(spam.scale)
spam.PCA$eig
spam$type
correlation(spam.scale)
correlations(spam.scale)
corr(spam.scale)
cor(spam.scale)
spam.PCA
spam.PCA$call$col.w
spam.PCA$ind
spam.PCA
spam.PCA$var
spam.PCA$var$cor
spam.PCA$eig
hist(spam.scale[,1])
hist(spam.scale[,2])
hist(spam.scale[,3])
hist(spam.scale[,4])
hist(spam.scale[,5])
hist(log(spam.scale[,5]))
hist(spam.scale[,c(1:5)])
hist(spam.scale)
hist(spam.scale[,10])
hist(spam.scale[,30])
length(spam.scale)
ncol(spam.scale)
hist(spam.scale[,50])
hist(spam.scale[,57])
spam.PCA <- PCA(log(spam.scale))
spam.scale
spam.scale[,1]
hist(spam.scale[,1])
log.spam <- log(spam.scale)
View(log.spam)
log.spam <- sapply(spam.scale, log)
warnings()
log(spam.scale[,1])
spam.scale[4538,1]
log(-.34)
log(.34)
spam
head(spam)
log(spam)
spam
spam.data <- spam
head(log(spam.data))
spam.data
spam.data <- spam[ , - length(spam)]
spam.data
head(log(spam.data))
log(spam.scale)
spam.PCA <- PCA(log(spam.scale))
spam.PCA$eig
spam.PCA$var$cor
which(spam.PCA$var$cor ==max(spam.PCA$var$cor))
spam.PCA$var$cor[32,]
?spam
hist(re)
hist(spam[,1])
spam.PCA <- PCA(spam.scale)
cor(spam.scale)
which(spam.PCA$var$cor$dim1 ==max(spam.PCA$var$cor$dim1))
str(spam.PCA$var$cor)
which(spam.PCA$var$cor[1] ==max(spam.PCA$var$cor$dim1[1]))
spam.PCA$var$cor[[1]
]
spam.PCA$var$cor
spam.PCA$var$cor[1]
spam.PCA$var$cor[1][1]
spam.PCA$var$cor[[1]]
spam.PCA$var$cor[Dim.1]
class(spam.PCA$var$cor)
spam.PCA$var$cor[, 1]
spam[,c('num857, type')]
spam[,c('num857', 'type')]
head(spam[,c('num857', 'type')])
spam[,'num857']
head(spam[2008,c('num857', 'type')])
head(spam[3540,c('num857', 'type')])
head(spam[4020,c('num857', 'type')])
head(spam[4021,c('num857', 'type')])
?log10
spam.PCA$var$contrib
order(spam.PCA$var$contrib[,1])
spam.PCA$var$contrib[54]
spam.PCA$var$contrib[32]
order(-spam.PCA$var$contrib[,1])
dim1 <- order(-spam.PCA$var$contrib[,1])
names(spam)[dim1[1:10]]
dim2.pos <- order(-spam.PCA$var$contrib[,2])
names(spam[dim2.pos[1:10]])
log.spam.PCA <- PCA(log10(spam[,-length(spam)])+1)
log.spam <- log10(spam[,-length(spam)])+1
log.spam.PCA <- PCA(log.spam)
log.spam <- log10(scale(spam[,-length(spam)]))+1
log.spam.PCA <- PCA(log.spam)
log.spam.PCA$eig
spam.scale
spam.scale$capitalLong
head(spam.scale)
type(spam.scale)
class(spam.scale)
spam.scale[, 'capitalLong']
cor(spam.scale[, 'capitalLong'], spam.scale[, 'capitalTotal']
cor(spam.scale[, 'capitalLong'], spam.scale[, 'capitalTotal'])
cor(spam.scale[, 'capitalLong'], spam.scale[, 'capitalTotal'])
log.spam <- log10(scale(spam[,-length(spam)])+1)
log.spam.PCA <- PCA(log.spam)
log.spam <- log10(spam[,-length(spam)]+1)
log.spam.PCA <- PCA(log.spam)
names(spam[dim2.pos[1:10]])
names(spam[dim2.pos[48:57])
names(spam[dim2.pos[48:57]])
dim2.pos
spam.PCA$var$contrib[,22]
spam.PCA$var$contrib[22]
dim2.pos <- order(-spam.PCA$var$cor[,2])
names(spam[dim2.pos[1:10]])
names(spam[dim2.pos[48:57]])
dim1 <- order(-spam.PCA$var$contrib[,1])
dim1 <- order(-spam.PCA$var$contrib[,1])
dim1 <- order(-spam.PCA$var$contrib[,1])
spam.PCA$var$contrib[32]
names(spam)[dim1[1:10]]
cor(spam.scale[, 'capitalLong'], spam.scale[, 'capitalTotal'])
dim1 <- order(-spam.PCA$var$contrib[,1])
spam.PCA$var$contrib[32]
names(spam)[dim1[1:10]]
spam.PCA$var$coord
spam.PCA$var$cor
cor(spam[,num857], spam[, num451])
cor(spam[,'num857'], spam[, 'num451'])
cor(spam[,'num857'], spam[,'num451'])
cor(spam[,'num857'], spam[,'num415'])
spam.PCA$eig
dim1 <- order(-spam.PCA$var$contrib[,1])
spam.PCA$var$contrib[32]
names(spam)[dim1[1:10]]
names(spam[dim2.pos[1:10]])
names(spam[dim2.pos[48:57]])
spam[, "num1999"]
spam[4499, 'type']
?PCA
?FA
library(flexclust) #Loading the flexclust library.
data(nutrient) #Loading the nutrient data.
help(nutrient) #Inspecting the data set; nutrients in meat, fish, and fowel.
nutrient
#Notice that the nutrient columns are in different measurements: calories,
#grams, and milligrams.
summary(nutrient)
sapply(nutrient, sd)
#We should scale the data.
nutrient.scaled = as.data.frame(scale(nutrient))
summary(nutrient.scaled)
sapply(nutrient.scaled, sd)
#We need to calcualte the pairwise distances between observations.
d = dist(nutrient.scaled)
#Using the hclust() function, we define the linkage manner by which we will
#cluster our data.
fit.single = hclust(d, method = "single")
fit.complete = hclust(d, method = "complete")
fit.average = hclust(d, method = "average")
#Creating various dendrograms.
par(mfrow = c(1, 3))
# hang is just for plot height
plot(fit.single, hang = -1, main = "Dendrogram of Single Linkage")
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage")
# where you cut is how many groups you want
# chaining effect observed in single. You have one large group and two small ones.
# complete linkage looks for similar size groups, tries to balance things out evenly
# but that can be quite artificial
# average is a mix of both.
#Cut the dendrogram into groups of data.
clusters.average = cutree(fit.average, k = 5)
clusters.average
#Viewing the groups of data.
table(clusters.average)
#Aggregating the original data by the cluster assignments.
# notice the patterns in the cluster
aggregate(nutrient, by = list(cluster = clusters.average), median)
#Aggregating the scaled data by the cluster assignments.
aggregate(nutrient.scaled, by = list(cluster = clusters.average), median)
#Visualizing the groups in the dendrogram.
par(mfrow = c(1, 1))
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage\n5 Clusters")
rect.hclust(fit.average, k = 5)
